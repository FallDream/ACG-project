#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
// clang-format off
#include "ray_payload.glsl"
#include "uniform_objects.glsl"
#include "constants.glsl"
#include "light.glsl"
#include "material_op.glsl"
// clang-format on

layout(binding = 0) uniform accelerationStructureEXT scene;
layout(binding = 1, rgba32f) uniform image2D accumulation_color;
layout(binding = 2, r32f) uniform image2D accumulation_number;
layout(binding = 3) uniform global_uniform_object {
  GlobalUniformObject guo;
};
layout(binding = 4) readonly buffer entity_array {
  EntityUniformObject entity_objects[];
};
layout(binding = 5) readonly buffer material_array {
  Material materials[];
};
layout(binding = 6) readonly buffer object_info_array {
  ObjectInfo object_infos[];
};
layout(binding = 7) readonly buffer vertex_array {
  float vertices[];
};
layout(binding = 8) readonly buffer index_array {
  uint indices[];
};
layout(binding = 9) uniform sampler2D[] texture_samplers;

layout(binding = 10) readonly buffer light_array {
  Light lights[];
};

float light_area_prefix[10], total_area;

layout(location = 0) rayPayloadEXT RayPayload ray_payload;

// clang-format off
#include "vertex.glsl"
#include "hit_record.glsl"
// clang-format on

vec3 SampleEnvmap(vec3 direction) {
  direction = normalize(mat3(guo.envmap_from_world) * direction);
  float x = guo.envmap_offset;
  float y = acos(direction.y) * INV_PI;
  if (length(vec2(direction.x, direction.y)) > 1e-4) {
    x += atan(direction.x, -direction.z);
  }
  x *= INV_PI * 0.5;
  return texture(texture_samplers[guo.envmap_id], vec2(x, y))
      .xyz;  // textures_[envmap_id_].Sample(glm::);
}

HitRecord hit_record, temp_hit_record;
void TraceRay(vec3 origin, vec3 direction, bool temp) {
  float tmin = 1e-3;
  float tmax = 1e4;

  ray_payload.t = -1.0;
  ray_payload.barycentric = vec3(0.0);
  ray_payload.object_id = 0;
  ray_payload.primitive_id = 0;
  ray_payload.object_to_world = mat4x3(1.0);

  traceRayEXT(scene, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, origin, tmin,
              direction, tmax, 0);
  if (temp) {
    temp_hit_record = GetHitRecord(ray_payload, origin, direction);
  } else {
    hit_record = GetHitRecord(ray_payload, origin, direction);
  }
}

void SampleLight(out vec3 position, out int entity_index, out float pdf) {
  float rn = RandomFloat();
  for (int j = 0; j < guo.num_lights; j++) {
    if (light_area_prefix[j] >= rn) {
      entity_index = int(lights[j].index);
      pdf = 1.0 / total_area;
      mat4 to_world = entity_objects[entity_index].model;
      vec2 rn_pos = RandomPair();
      vec4 a = vec4(-1.0 + 2.0 * rn_pos.x, -1.0 + 2.0 * rn_pos.y, 0.0, 1.0); // sample on the original rectangle
      a = to_world * a;
      position = a.xyz / a.w;
      break;
    }
  }
}

vec3 SampleRay(vec3 origin, vec3 direction) {
  bool sampling_lights = true && (guo.num_lights > 0);

  vec3 radiance = vec3(0.0);
  vec3 throughput = vec3(1.0);
  float rr = 0.8;
  bool allow_light = true; // whether to allow for lights as the next hit object
  for (int b = 0; b < guo.num_bounces; b++) {
    TraceRay(origin, direction, false);
    if (ray_payload.t == -1.0) {
      radiance += throughput * SampleEnvmap(direction);
      break;
    } else {
      Material material = materials[hit_record.hit_entity_id];

      // directly hit a light
      if (material.material_type == MATERIAL_TYPE_EMISSION) {
        if (!allow_light) break;
        if (hit_record.front_face) {
          vec3 emittance = material.emittance;
          if (b > 0) {
            float dist = distance(origin, hit_record.position);
            radiance += emittance * throughput * max(0.f, dot(-direction, hit_record.normal)) / dist / dist;
          } else {
            radiance += emittance * throughput * max(0.f, dot(-direction, hit_record.normal));
          }
        }
        break;
      }

      // material reflectance
      throughput *= material.albedo_color *
                    vec3(texture(texture_samplers[material.albedo_texture_id],
                                 hit_record.tex_coord));
 
      // sampling lights
      if (sampling_lights && material.material_type != MATERIAL_TYPE_SPECULAR) {
        vec3 light_pos; int light_id; float light_pdf;
        SampleLight(light_pos, light_id, light_pdf);
        vec3 light_dir = normalize(light_pos - hit_record.position);
        TraceRay(hit_record.position, light_dir, true);
        if (temp_hit_record.hit_entity_id == light_id && temp_hit_record.front_face) {
          float dist = distance(hit_record.position, light_pos);
          Material light_material = materials[light_id];
          vec3 emittance = light_material.emittance;
          radiance += emittance * throughput * max(0.f, dot(-light_dir, temp_hit_record.normal)) 
                      * EvalBRDF(material, hit_record.normal, direction, light_dir) / dist / dist / light_pdf;
        }
        allow_light = false;
      } else {
        allow_light = true;
      }
      float rr_sample = RandomFloat();
      if (rr_sample > rr) break;

      // value = bsdf / pdf * cosine
      float value = 0.f;
      vec3 out_direction;
      SampleDirection(material, hit_record.normal, direction, out_direction, value);
      throughput *= value;

      // RR
      throughput /= rr;

      origin = hit_record.position;
      direction = out_direction;


      // throughput *= material.albedo_color *
      //               vec3(texture(texture_samplers[material.albedo_texture_id],
      //                            hit_record.tex_coord));
      // origin = hit_record.position;
      // direction = guo.envmap_light_direction;
      // radiance += throughput * guo.envmap_minor_color;
      // throughput *= max(dot(direction, hit_record.normal), 0.0) * 2.0;
      // TraceRay(origin, direction);
      // if (ray_payload.t < 0.0f) {
      //   radiance += throughput * guo.envmap_major_color;
      // }
    }
  }
  return radiance;
}

void main() {
  if (guo.num_lights > 0) {
    light_area_prefix[0] = lights[0].area;
    for (int i = 1; i < guo.num_lights; i++) {
      light_area_prefix[i] = light_area_prefix[i - 1] + lights[i].area;
    }
    total_area = light_area_prefix[guo.num_lights - 1];
    for (int i = 0; i < guo.num_lights; i++) {
      light_area_prefix[i] /= total_area;
    }
  }

  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  const vec2 UVoffset = vec2(0.5) / vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;
  const vec2 doffset = 2 * UVoffset;

  mat4 camera_to_world = inverse(guo.camera);
  mat4 screen_to_camera = inverse(guo.projection);

  for (int i = 0; i < guo.num_samples; i++) {
    InitRandomSeed(uint(pixelCenter.x), uint(pixelCenter.y),
                   guo.accumulated_sample + i);
    vec2 antialiasing_offset = (RandomPair() * 2.0 - 1.0) * doffset;
    vec4 origin = camera_to_world * vec4(0, 0, 0, 1);
    vec4 target = screen_to_camera * vec4(d.x + antialiasing_offset.x, d.y + antialiasing_offset.y, 1, 1);
    vec4 direction = camera_to_world * vec4(normalize(target.xyz), 0);

    imageStore(accumulation_color, ivec2(gl_LaunchIDEXT.xy),
               imageLoad(accumulation_color, ivec2(gl_LaunchIDEXT.xy)) +
                   vec4(SampleRay(origin.xyz, direction.xyz), 1.0));
    // imageStore(accumulation_color, ivec2(gl_LaunchIDEXT.xy),
    //            imageLoad(accumulation_color, ivec2(gl_LaunchIDEXT.xy)) +
    //                vec4(vec3(20.0f), 1.0));
    imageStore(accumulation_number, ivec2(gl_LaunchIDEXT.xy),
               imageLoad(accumulation_number, ivec2(gl_LaunchIDEXT.xy)) + 1.0);
  }
}
